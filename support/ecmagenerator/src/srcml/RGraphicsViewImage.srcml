<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="./gui" filename="RGraphicsViewImage.h"><comment type="block">/**
 * Copyright (c) 2011-2018 by Andrew Mustun. All rights reserved.
 * 
 * This file is part of the QCAD project.
 *
 * QCAD is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * QCAD is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with QCAD.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>RGRAPHICSVIEWIMAGE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RGRAPHICSVIEWIMAGE_H</name></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"gui_global.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QtCore&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPinchGesture&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QTransform&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;QPainter&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RGraphicsView.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"RPainterPath.h"</cpp:file></cpp:include>

<class_decl>class <name>RAction</name>;</class_decl>
<class_decl>class <name>RDocument</name>;</class_decl>
<class_decl>class <name>RDocumentInterface</name>;</class_decl>
<class_decl>class <name>RGraphicsSceneQt</name>;</class_decl>
<class_decl>class <name>RGraphicsSceneDrawable</name>;</class_decl>
<class_decl>class <name>RLine</name>;</class_decl>
<class_decl>class <name>RSnap</name>;</class_decl>
<class_decl>class <name>RSnapRestriction</name>;</class_decl>
<class_decl>class <name>RGraphicsViewImage</name>;</class_decl>
<class_decl>class <name>RGraphicsViewWorker</name>;</class_decl>


<comment type="block">/**
 * \brief QImage based 2d graphics view.
 *
 * This graphics view renders a rectangular area of a RGraphicsSceneQt into a QImage.
 *
 * \ingroup gui
 * \scriptable
 */</comment>
<class>class <macro><name>QCADGUI_EXPORT</name></macro> <name>RGraphicsViewImage</name> <super>: <specifier>public</specifier> <name>QObject</name>, <specifier>public</specifier> <name>RGraphicsView</name></super> <block>{<private type="default">
    <macro><name>Q_OBJECT</name></macro>

</private><public>public:
    <constructor_decl><name>RGraphicsViewImage</name><parameter_list>(<param><decl><type><name>QObject</name>*</type> <name>parent</name>=<init><expr><name>NULL</name></expr></init></decl></param>)</parameter_list>;</constructor_decl>
    <destructor_decl><specifier>virtual</specifier> <name>~RGraphicsViewImage</name><parameter_list>()</parameter_list>;</destructor_decl>

    <function><type><name>int</name></type> <name>getNumThreads</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>numThreads</name></expr>;</return>
    }</block></function>
    <function_decl><type><name>void</name></type> <name>setNumThreads</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// TODO: these methods are not found in RGraphicsViewQt, due to the</comment>
    <comment type="line">// multiple inheritance of RGraphicsViewQt (QWidget and RGraphicsViewImage)</comment>
    <comment type="line">// unless they are re-declared here again:</comment>
<comment type="line">//    void setViewportNumber(int n) {</comment>
<comment type="line">//        RGraphicsView::setViewportNumber(n);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    int getViewportNumber() const {</comment>
<comment type="line">//        return RGraphicsView::getViewportNumber();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setNavigationAction(RAction* action) {</comment>
<comment type="line">//        RGraphicsView::setNavigationAction(action);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RBox getBox() const {</comment>
<comment type="line">//        return RGraphicsView::getBox();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void autoZoom(int margin = RDEFAULT_MIN1, bool ignoreEmpty=false, bool ignoreLineweight=false) {</comment>
<comment type="line">//        RGraphicsView::autoZoom(margin, ignoreEmpty, ignoreLineweight);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void zoomTo(const RBox &amp;window, int margin = 0) {</comment>
<comment type="line">//        RGraphicsView::zoomTo(window, margin);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void zoom(const RVector&amp; center, double factor) {</comment>
<comment type="line">//        RGraphicsView::zoom(center, factor);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void pan(const RVector&amp; delta, bool regen=true) {</comment>
<comment type="line">//        RGraphicsView::pan(delta, regen);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void centerToBox(const RBox&amp; box) {</comment>
<comment type="line">//        RGraphicsView::centerToBox(box);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void centerToPoint(const RVector&amp; point) {</comment>
<comment type="line">//        RGraphicsView::centerToPoint(point);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setGrid(RGrid* grid) {</comment>
<comment type="line">//        RGraphicsView::setGrid(grid);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RGrid* getGrid() {</comment>
<comment type="line">//        return RGraphicsView::getGrid();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    double getFactor(bool includeStepFactor=true) const {</comment>
<comment type="line">//        return RGraphicsView::getFactor(includeStepFactor);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setFactor(double f, bool regen=true) {</comment>
<comment type="line">//        RGraphicsView::setFactor(f, regen);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RVector getOffset(bool includeStepOffset=true) const {</comment>
<comment type="line">//        return RGraphicsView::getOffset(includeStepOffset);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setOffset(const RVector&amp; offset, bool regen=true) {</comment>
<comment type="line">//        RGraphicsView::setOffset(offset, regen);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    QColor getBackgroundColor() {</comment>
<comment type="line">//        return RGraphicsView::getBackgroundColor();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setMargin(int m) {</comment>
<comment type="line">//        RGraphicsView::setMargin(m);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setColorMode(RGraphicsView::ColorMode cm) {</comment>
<comment type="line">//        RGraphicsView::setColorMode(cm);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setHairlineMode(bool on) {</comment>
<comment type="line">//        RGraphicsView::setHairlineMode(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool getHairlineMode() {</comment>
<comment type="line">//        return RGraphicsView::getHairlineMode();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setHairlineMinimumMode(bool on) {</comment>
<comment type="line">//        RGraphicsView::setHairlineMinimumMode(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool getHairlineMinimumMode() {</comment>
<comment type="line">//        return RGraphicsView::getHairlineMinimumMode();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setAntialiasing(bool on) {</comment>
<comment type="line">//        RGraphicsView::setAntialiasing(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool getAntialiasing() const {</comment>
<comment type="line">//        return RGraphicsView::getAntialiasing();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RGraphicsScene* getScene() const {</comment>
<comment type="line">//        return RGraphicsView::getScene();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RDocument* getDocument() const {</comment>
<comment type="line">//        return RGraphicsView::getDocument();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    RDocumentInterface* getDocumentInterface() const {</comment>
<comment type="line">//        return RGraphicsView::getDocumentInterface();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setExporting(bool on) {</comment>
<comment type="line">//        RGraphicsView::setExporting(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool isExporting() const {</comment>
<comment type="line">//        return RGraphicsView::isExporting();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool isPrintingOrExporting() const {</comment>
<comment type="line">//        return RGraphicsView::isPrintingOrExporting();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPrinting(bool on) {</comment>
<comment type="line">//        RGraphicsView::setPrinting(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool isPrinting() const {</comment>
<comment type="line">//        return RGraphicsView::isPrinting();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPrintPreview(bool on) {</comment>
<comment type="line">//        RGraphicsView::setPrintPreview(on);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool isPrintPreview() const {</comment>
<comment type="line">//        return RGraphicsView::isPrintPreview();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setPrintPointSize(const RVector&amp; s) {</comment>
<comment type="line">//        RGraphicsView::setPrintPointSize(s);</comment>
<comment type="line">//    }</comment>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>simulateMouseMoveEvent</name><parameter_list>()</parameter_list>;</function_decl>

<comment type="line">//    void setTextHeightThresholdOverride(int v) {</comment>
<comment type="line">//        RGraphicsView::setTextHeightThresholdOverride(v);</comment>
<comment type="line">//    }</comment>

<comment type="line">//    int getTextHeightThresholdOverride() const {</comment>
<comment type="line">//        return RGraphicsView::getTextHeightThresholdOverride();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    bool isGridVisible() const {</comment>
<comment type="line">//        return RGraphicsView::isGridVisible();</comment>
<comment type="line">//    }</comment>

<comment type="line">//    void setGridVisible(bool on) {</comment>
<comment type="line">//        RGraphicsView::setGridVisible(on);</comment>
<comment type="line">//    }</comment>
    
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setScene</name><parameter_list>(<param><decl><type><name>RGraphicsSceneQt</name>*</type> <name>scene</name></decl></param>, <param><decl><type><name>bool</name></type> <name>regen</name>=<init><expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setBackgroundColor</name><parameter_list>(<param><decl><type><name>const</name> <name>QColor</name>&amp;</type> <name>col</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>regenerate</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>force</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>repaintView</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>updateImage</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>giveFocus</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>bool</name></type> <name>hasFocus</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>removeFocus</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>saveViewport</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>restoreViewport</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>mapFromView</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>, <param><decl><type><name>double</name></type> <name>z</name>=<init><expr>0.0</expr></init></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RVector</name></type> <name>mapToView</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>v</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>mapDistanceFromView</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>double</name></type> <name>mapDistanceToView</name><parameter_list>(<param><decl><type><name>double</name></type> <name>d</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>resizeImage</name><parameter_list>(<param><decl><type><name>int</name></type> <name>w</name></decl></param>, <param><decl><type><name>int</name></type> <name>h</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintGridPoint</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>ucsPosition</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintGridLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>ucsPosition</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintCursorLine</name><parameter_list>(<param><decl><type><name>const</name> <name>RLine</name>&amp;</type> <name>ucsPosition</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setPaintOrigin</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>val</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>setPanOptimization</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>getPanOptimization</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintEntities</name><parameter_list>(<param><decl><type><name>QPainter</name>*</type> <name>painter</name></decl></param>, <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>paintEntitiesMulti</name><parameter_list>(<param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>queryBox</name></decl></param>)</parameter_list>;</function_decl>
    <comment type="line">//void paintEntitiesThread(int threadId, const QList&lt;REntity::Id&gt;&amp; list, int start, int end);</comment>
    <comment type="line">//void paintDrawablesThread(int threadId, const QList&lt;RGraphicsSceneDrawable&gt;&amp; list, int start, int end);</comment>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintEntityThread</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name><name>REntity</name>::<name>Id</name></name></type> <name>id</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintDrawableThread</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>RGraphicsSceneDrawable</name>&amp;</type> <name>drawable</name></decl></param>, <param><decl><type><name>const</name> <name>RBox</name>&amp;</type> <name>clipRectangle</name></decl></param>, <param><decl><type><name>bool</name></type> <name>preview</name> =<init> <expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintOverlay</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>QImage</name></type> <name>getBuffer</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>QTransform</name></type> <name>getTransform</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>void</name></type> <name>clearBackground</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addToBackground</name><parameter_list>(<param><decl><type><name>const</name> <name>RGraphicsSceneDrawable</name>&amp;</type> <name>drawable</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>setBackgroundTransform</name><parameter_list>(<param><decl><type><name>double</name></type> <name>bgFactor</name></decl></param>, <param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>bgOffset</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>void</name></type> <name>clearOverlay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>overlayId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>clearOverlay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>overlayId</name></decl></param>, <param><decl><type><name><name>RObject</name>::<name>Id</name></name></type> <name>objectId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>addToOverlay</name><parameter_list>(<param><decl><type><name>int</name></type> <name>overlayId</name></decl></param>, <param><decl><type><name><name>RObject</name>::<name>Id</name></name></type> <name>objectId</name></decl></param>, <param><decl><type><name>const</name> <name>RGraphicsSceneDrawable</name>&amp;</type> <name>drawable</name></decl></param>)</parameter_list>;</function_decl>

    <function><type><name>void</name></type> <name>setColorCorrectionOverride</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>colorCorrectionOverride</name> = (<name>int</name>)<name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>getColorCorrectionOverride</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr>(<name>colorCorrectionOverride</name>!=0)</expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMinimumLineweight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>minimumLineweight</name> = <name>lw</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getMinimumLineweight</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>minimumLineweight</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setMaximumLineweight</name><parameter_list>(<param><decl><type><name>double</name></type> <name>lw</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>maximumLineweight</name> = <name>lw</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getMaximumLineweight</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>maximumLineweight</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setPaintOffset</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>offset</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>paintOffset</name> = <name>offset</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getPaintOffset</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>paintOffset</name></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>isAlphaEnabled</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>alphaEnabled</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setAlphaEnabled</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>on</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>alphaEnabled</name> = <name>on</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>QImage</name></type> <name>getGraphicsBufferWithPreview</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>graphicsBufferWithPreview</name></expr>;</return>
    }</block></function>

    <function><type><name>RVector</name></type> <name>getLastKnownScreenPosition</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>lastKnownScreenPosition</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setLastKnownScreenPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>lastKnownScreenPosition</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setLastKnownModelPosition</name><parameter_list>(<param><decl><type><name>const</name> <name>RVector</name>&amp;</type> <name>p</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>lastKnownModelPosition</name> = <name>p</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>isShared</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <comment type="line">// never delete image view:</comment>
        <comment type="line">// owned by creator</comment>
        <return>return <expr><name>true</name></expr>;</return>
    }</block></function>

    <function><type><name>virtual</name> <name>bool</name></type> <name>registerForFocus</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>true</name></expr>;</return>
    }</block></function>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>viewportChangeEvent</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>emitUpdateSnapInfo</name><parameter_list>(<param><decl><type><name>RSnap</name>*</type> <name>snap</name></decl></param>, <param><decl><type><name>RSnapRestriction</name>*</type> <name>restriction</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>emitUpdateTextLabel</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextLabel</name>&amp;</type> <name>textLabel</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>double</name></type> <name>getDevicePixelRatio</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintImage</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>const</name> <name>RImageData</name>&amp;</type> <name>image</name></decl></param>, <param><decl><type><name>bool</name></type> <name>workingSet</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintText</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>const</name> <name>RTextBasedData</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>bool</name></type> <name>workingSet</name> =<init> <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

</public><protected>protected:
    <function_decl><type><name>QList<argument_list>&lt;<argument><name>RPainterPath</name></argument>&gt;</argument_list></name></type> <name>getTextLayoutsPainterPaths</name><parameter_list>(<param><decl><type><name>const</name> <name>RTextBasedData</name>&amp;</type> <name>text</name></decl></param>, <param><decl><type><name>const</name> <name>QList<argument_list>&lt;<argument><name>RTextLayout</name></argument>&gt;</argument_list></name>&amp;</type> <name>textLayouts</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyMinimumLineweight</name><parameter_list>(<param><decl><type><name>QPen</name>&amp;</type> <name>pen</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyColorCorrection</name><parameter_list>(<param><decl><type><name>QPen</name>&amp;</type> <name>pen</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyColorCorrection</name><parameter_list>(<param><decl><type><name>QBrush</name>&amp;</type> <name>brush</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyColorMode</name><parameter_list>(<param><decl><type><name>QPen</name>&amp;</type> <name>pen</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>applyColorMode</name><parameter_list>(<param><decl><type><name>QBrush</name>&amp;</type> <name>brush</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>double</name></type> <name>getPointSize</name><parameter_list>(<param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawDot</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawPlus</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>, <param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawEx</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>, <param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawVBar</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>, <param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawCircle</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>, <param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawSquare</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>QPointF</name></type> <name>pt</name></decl></param>, <param><decl><type><name>double</name></type> <name>pSize</name></decl></param>)</parameter_list>;</function_decl>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintOrigin</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintReferencePoint</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>const</name> <name>RRefPoint</name>&amp;</type> <name>pos</name></decl></param>, <param><decl><type><name>bool</name></type> <name>highlight</name></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>paintErase</name><argument_list>(<argument><expr><name>RGraphicsViewWorker</name>* <name>worker</name></expr></argument>, <argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>paintGrid</name><argument_list>(<argument><expr><name>RGraphicsViewWorker</name>* <name>worker</name></expr></argument>, <argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>paintMetaGrid</name><argument_list>(<argument><expr><name>RGraphicsViewWorker</name>* <name>worker</name></expr></argument>, <argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintCursor</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>paintRelativeZero</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>paintDocument</name><argument_list>(<argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>paintBackground</name><argument_list>(<argument><expr><name>RGraphicsViewWorker</name>* <name>worker</name></expr></argument>, <argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <function_decl><type><name>virtual</name> <name>void</name></type> <name>endPaint</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setBrush</name><parameter_list>(<param><decl><type><name>const</name> <name>QBrush</name>&amp;</type> <name>brush</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>setPen</name><parameter_list>(<param><decl><type><name>const</name> <name>QPen</name>&amp;</type> <name>pen</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>drawLine</name><parameter_list>(<param><decl><type><name>const</name> <name>QLineF</name>&amp;</type> <name>line</name></decl></param>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <comment type="block">/**
     * \nonscriptable
     */</comment>
    <decl_stmt><decl><type><name>void</name></type> <name>initPainter</name><argument_list>(<argument><expr><name>QPaintDevice</name>&amp; <name>device</name></expr></argument>, <argument><expr><name>bool</name> <name>erase</name></expr></argument>, <argument><expr><name>bool</name> <name>screen</name> = <name>false</name></expr></argument>, <argument><expr><name>const</name> <name>QRect</name>&amp; <name>rect</name> = <call><name>QRect</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <function_decl><type><name>void</name></type> <name>invalidate</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>force</name>=<init><expr><name>false</name></expr></init></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>void</name></type> <name>initWorkers</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>virtual</name> <name>RGraphicsViewWorker</name>*</type> <name>initWorker</name><parameter_list>(<param><decl><type><name>int</name></type> <name>threadId</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>updateTransformation</name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

<label><name>signals</name>:</label>
    <function_decl><type><name>void</name></type> <name>viewportChanged</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>updateSnapInfo</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>RSnap</name>*</type> <name>snap</name></decl></param>, <param><decl><type><name>RSnapRestriction</name>*</type> <name>restriction</name></decl></param>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>updateTextLabel</name><parameter_list>(<param><decl><type><name>RGraphicsViewWorker</name>*</type> <name>worker</name></decl></param>, <param><decl><type><name>const</name> <name>RTextLabel</name>&amp;</type> <name>textLabel</name></decl></param>)</parameter_list>;</function_decl>

</protected><protected>protected:
    <comment type="line">//QList&lt;QImage&gt; graphicsBufferThread;</comment>
    <comment type="line">//QList&lt;QPainter*&gt; painterThread;</comment>

    <comment type="line">// graphics buffer with current drawing rendered into it, without preview:</comment>
    <decl_stmt><decl><type><name>QImage</name></type> <name>graphicsBuffer</name></decl>;</decl_stmt>
    <comment type="line">// graphics buffer with current drawing rendered into it, with preview:</comment>
    <decl_stmt><decl><type><name>QImage</name></type> <name>graphicsBufferWithPreview</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>numThreads</name></decl>;</decl_stmt>

</protected><protected>protected:
    <decl_stmt><decl><type><name>bool</name></type> <name>panOptimization</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QMutex</name></type> <name>mutexSi</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RGraphicsSceneQt</name>*</type> <name>sceneQt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>currentScale</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QSize</name></type> <name>lastSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>lastOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>lastFactor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>graphicsBufferNeedsUpdate</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mutable</name> <name>QTransform</name></type> <name>transform</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QTransform</name></type> <name>previousView</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QPainter</name>*</type> <name>painter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>doPaintOrigin</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>isSelected</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>QSet<argument_list>&lt;<argument><name><name>RObject</name>::<name>Id</name></name></argument>&gt;</argument_list></name></type> <name>selectedIds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bgColorLightness</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>colorCorrectionOverride</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>colorCorrection</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>colorCorrectionDisableForPrinting</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>colorThreshold</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>minimumLineweight</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>maximumLineweight</name></decl>;</decl_stmt>

<comment type="line">//    int textHeightThresholdOverride;</comment>
<comment type="line">//    int textHeightThreshold;</comment>

    <decl_stmt><decl><type><name>double</name></type> <name>drawingScale</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RGraphicsSceneDrawable</name></argument>&gt;</argument_list></name></type> <name>backgroundDecoration</name></decl>;</decl_stmt>
    <comment type="line">//QTransform backgroundTransform;</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>backgroundFactor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RVector</name></type> <name>backgroundOffset</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QMap<argument_list>&lt;<argument><name>int</name></argument>, <argument><name>QMap<argument_list>&lt;<argument><name><name>RObject</name>::<name>Id</name></name></argument>, <argument><name>QList<argument_list>&lt;<argument><name>RGraphicsSceneDrawable</name></argument>&gt;</argument_list></name></argument> &gt;</argument_list></name></argument> &gt;</argument_list></name></type> <name>overlayDrawables</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RBox</name></type> <name>clipBox</name></decl>;</decl_stmt>
    <comment type="line">//QList&lt;QStack&lt;RTransform&gt; &gt; entityTransformThread;</comment>
    <decl_stmt><decl><type><name>RVector</name></type> <name>paintOffset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>alphaEnabled</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QString</name></type> <name>lastScaleString</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>showOnlyPlottable</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>QList<argument_list>&lt;<argument><name>RGraphicsViewWorker</name>*</argument>&gt;</argument_list></name></type> <name>workers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RGraphicsViewWorker</name>*</type> <name>decorationWorker</name></decl>;</decl_stmt>
</protected>}</block>;</class>

<macro><name>Q_DECLARE_METATYPE</name><argument_list>(<argument>RGraphicsViewImage*</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

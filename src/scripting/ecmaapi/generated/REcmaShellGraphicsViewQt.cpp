


	// ***** AUTOGENERATED CODE, DO NOT EDIT *****
    
        #include "REcmaShellGraphicsViewQt.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RAction.h"
            
                #include "RDocument.h"
            
                #include "RDocumentInterface.h"
            
                #include "RFocusFrame.h"
            
                #include "RGraphicsSceneQt.h"
            
                #include "RLine.h"
            
                #include "RSnap.h"
            
                #include "RSnapRestriction.h"
            
            
        // includes for base ecma wrapper classes
        

            #define QTSCRIPT_IS_GENERATED_FUNCTION(fun) ((fun.data().toUInt32() & 0xFFFF0000) == 0xBABE0000)
            #define QTSCRIPT_IS_FUNCTION_IN_CALL(fun) ((fun.data().toUInt32() & 0x0000F000) == 0x0000B000)

        
    // Destructor:
    REcmaShellGraphicsViewQt::~REcmaShellGraphicsViewQt() {}
        RGraphicsViewQt* REcmaShellGraphicsViewQt::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGraphicsViewQt* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGraphicsViewQt >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGraphicsViewQt.%1(): "
                        "This object is not a RGraphicsViewQt").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        REcmaShellGraphicsViewQt* REcmaShellGraphicsViewQt::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGraphicsViewQt* selfBase = getSelf(fName, context);
                REcmaShellGraphicsViewQt* self = dynamic_cast<REcmaShellGraphicsViewQt*>(selfBase);
                //return REcmaHelper::scriptValueTo<REcmaShellGraphicsViewQt >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGraphicsViewQt.%1(): "
                    "This object is not a RGraphicsViewQt").arg(fName),
                    context);
            }

            return self;
            


        }
        
    
    
    // Constructors:
    
      REcmaShellGraphicsViewQt::REcmaShellGraphicsViewQt(
                QWidget * parent, bool showFocus
            ) : RGraphicsViewQt(
                parent, showFocus
                ) {
            }
        
    
    
      void REcmaShellGraphicsViewQt::setImageView(
                RGraphicsViewImage * v
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::setImageView", engine);
                QScriptValue _q_function = __qtscript_self.property("setImageView");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::setImageView";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::setImageView(
                            v
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setImageView", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: RGraphicsViewImage *, copyable: false
        << qScriptValueFromValue(engine, 

        v
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setImageView", engine);

                    
            }
        
    
    
      RGraphicsViewImage * REcmaShellGraphicsViewQt::getImageView(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::getImageView", engine);
                QScriptValue _q_function = __qtscript_self.property("getImageView");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::getImageView";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewImage * ret =
                        RGraphicsViewQt::getImageView(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getImageView", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    RGraphicsViewImage * res;
                      
                          res = qscriptvalue_cast< 
                            RGraphicsViewImage *
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getImageView", engine);

                    
                            return res;
                          
            }
        
    
    
      void REcmaShellGraphicsViewQt::disableGestures(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::disableGestures", engine);
                QScriptValue _q_function = __qtscript_self.property("disableGestures");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::disableGestures";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::disableGestures(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::disableGestures", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self)
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::disableGestures", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::removeFocus(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::removeFocus", engine);
                QScriptValue _q_function = __qtscript_self.property("removeFocus");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::removeFocus";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::removeFocus(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::removeFocus", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self)
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::removeFocus", engine);

                    
            }
        
    
    
      int REcmaShellGraphicsViewQt::getWidth(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::getWidth", engine);
                QScriptValue _q_function = __qtscript_self.property("getWidth");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::getWidth";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        int ret =
                        RGraphicsViewQt::getWidth(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getWidth", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    int res;
                      
                          res = qscriptvalue_cast< 
                            int
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getWidth", engine);

                    
                            return res;
                          
            }
        
    
    
      int REcmaShellGraphicsViewQt::getHeight(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::getHeight", engine);
                QScriptValue _q_function = __qtscript_self.property("getHeight");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::getHeight";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        int ret =
                        RGraphicsViewQt::getHeight(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getHeight", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    int res;
                      
                          res = qscriptvalue_cast< 
                            int
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getHeight", engine);

                    
                            return res;
                          
            }
        
    
    
      QRect REcmaShellGraphicsViewQt::getRect(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::getRect", engine);
                QScriptValue _q_function = __qtscript_self.property("getRect");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::getRect";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        QRect ret =
                        RGraphicsViewQt::getRect(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getRect", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    QRect res;
                      
                          res = qscriptvalue_cast< 
                            QRect
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getRect", engine);

                    
                            return res;
                          
            }
        
    
    
      bool REcmaShellGraphicsViewQt::getSignalsBlocked(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::getSignalsBlocked", engine);
                QScriptValue _q_function = __qtscript_self.property("getSignalsBlocked");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::getSignalsBlocked";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        bool ret =
                        RGraphicsViewQt::getSignalsBlocked(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getSignalsBlocked", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    bool res;
                      
                          res = qscriptvalue_cast< 
                            bool
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::getSignalsBlocked", engine);

                    
                            return res;
                          
            }
        
    
    
      void REcmaShellGraphicsViewQt::setSignalsBlocked(
                bool on
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::setSignalsBlocked", engine);
                QScriptValue _q_function = __qtscript_self.property("setSignalsBlocked");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::setSignalsBlocked";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::setSignalsBlocked(
                            on
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setSignalsBlocked", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: bool, copyable: true
        << qScriptValueFromValue(engine, 

        on
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setSignalsBlocked", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::setFocusFrameWidget(
                QFrame * w
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::setFocusFrameWidget", engine);
                QScriptValue _q_function = __qtscript_self.property("setFocusFrameWidget");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::setFocusFrameWidget";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::setFocusFrameWidget(
                            w
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setFocusFrameWidget", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QFrame *, copyable: false
        << qScriptValueFromValue(engine, 

        w
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::setFocusFrameWidget", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::simulateMouseMoveEvent(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::simulateMouseMoveEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("simulateMouseMoveEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::simulateMouseMoveEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::simulateMouseMoveEvent(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::simulateMouseMoveEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                            _q_function.call(__qtscript_self)
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::simulateMouseMoveEvent", engine);

                    
            }
        
    
    
      QSize REcmaShellGraphicsViewQt::sizeHint(
                
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::sizeHint", engine);
                QScriptValue _q_function = __qtscript_self.property("sizeHint");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=0*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::sizeHint";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        QSize ret =
                        RGraphicsViewQt::sizeHint(
                            
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::sizeHint", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    QSize res;
                      
                          res = qscriptvalue_cast< 
                            QSize
                          >(
                        
                            _q_function.call(__qtscript_self)
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::sizeHint", engine);

                    
                            return res;
                          
            }
        
    
    
      bool REcmaShellGraphicsViewQt::event(
                QEvent * e
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::event", engine);
                QScriptValue _q_function = __qtscript_self.property("event");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::event";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        bool ret =
                        RGraphicsViewQt::event(
                            e
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::event", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, event, "event");
                        bool res;
                      
                          res = qscriptvalue_cast< 
                            bool
                          >(
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        e
        )
      
                            )
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::event", engine);

                    
                            return res;
                          
            }
        
    
    
      bool REcmaShellGraphicsViewQt::gestureEvent(
                QGestureEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::gestureEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("gestureEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::gestureEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        bool ret =
                        RGraphicsViewQt::gestureEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::gestureEvent", engine);

                        
                            return ret;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, gestureEvent, "gestureEvent");
                        bool res;
                      
                          res = qscriptvalue_cast< 
                            bool
                          >(
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QGestureEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                      )
                    
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::gestureEvent", engine);

                    
                            return res;
                          
            }
        
    
    
      void REcmaShellGraphicsViewQt::focusInEvent(
                QFocusEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::focusInEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("focusInEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::focusInEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::focusInEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::focusInEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, focusInEvent, "focusInEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QFocusEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::focusInEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::focusOutEvent(
                QFocusEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::focusOutEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("focusOutEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::focusOutEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::focusOutEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::focusOutEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, focusOutEvent, "focusOutEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QFocusEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::focusOutEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::tabletEvent(
                QTabletEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::tabletEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("tabletEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::tabletEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::tabletEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::tabletEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, tabletEvent, "tabletEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QTabletEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::tabletEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::mouseMoveEvent(
                QMouseEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::mouseMoveEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseMoveEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::mouseMoveEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::mouseMoveEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseMoveEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseMoveEvent, "mouseMoveEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseMoveEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::mousePressEvent(
                QMouseEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::mousePressEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mousePressEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::mousePressEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::mousePressEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mousePressEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, mousePressEvent, "mousePressEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mousePressEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::mouseReleaseEvent(
                QMouseEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::mouseReleaseEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseReleaseEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::mouseReleaseEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::mouseReleaseEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseReleaseEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseReleaseEvent, "mouseReleaseEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseReleaseEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::mouseDoubleClickEvent(
                QMouseEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::mouseDoubleClickEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("mouseDoubleClickEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::mouseDoubleClickEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::mouseDoubleClickEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseDoubleClickEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, mouseDoubleClickEvent, "mouseDoubleClickEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QMouseEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::mouseDoubleClickEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::wheelEvent(
                QWheelEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::wheelEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("wheelEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::wheelEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::wheelEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::wheelEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, wheelEvent, "wheelEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QWheelEvent *, copyable: true
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::wheelEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::paintEvent(
                QPaintEvent * arg1
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::paintEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("paintEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::paintEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::paintEvent(
                            arg1
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::paintEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, paintEvent, "paintEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QPaintEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        arg1
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::paintEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::resizeEvent(
                QResizeEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::resizeEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("resizeEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::resizeEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::resizeEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::resizeEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, resizeEvent, "resizeEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QResizeEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::resizeEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::keyPressEvent(
                QKeyEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::keyPressEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("keyPressEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::keyPressEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::keyPressEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::keyPressEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, keyPressEvent, "keyPressEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QKeyEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::keyPressEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::keyReleaseEvent(
                QKeyEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::keyReleaseEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("keyReleaseEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::keyReleaseEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::keyReleaseEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::keyReleaseEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, keyReleaseEvent, "keyReleaseEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QKeyEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::keyReleaseEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::dragEnterEvent(
                QDragEnterEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::dragEnterEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("dragEnterEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::dragEnterEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::dragEnterEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::dragEnterEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, dragEnterEvent, "dragEnterEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QDragEnterEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::dragEnterEvent", engine);

                    
            }
        
    
    
      void REcmaShellGraphicsViewQt::dropEvent(
                QDropEvent * event
            ) {
                QScriptEngine* engine = __qtscript_self.engine();
                //REcmaHelper::shellFunctionStart("REcmaShellGraphicsViewQt::dropEvent", engine);
                QScriptValue _q_function = __qtscript_self.property("dropEvent");



                if (!_q_function.isFunction() || 
                    QTSCRIPT_IS_GENERATED_FUNCTION(_q_function) ||
                    QTSCRIPT_IS_FUNCTION_IN_CALL(_q_function)
                    
                    /* function might have more arguments than expected:
                    || _q_function.property("length").toInt32()!=1*/
                    /*|| (__qtscript_self.propertyFlags("atEnd") & QScriptValue::QObjectMember)*/
                    ) {
                    //QString cppSig = "RGraphicsViewQt::dropEvent";
                    
                        // re-enable recursion for calls from C++ into ECMAScript functions
                        // leave it marked as generated though if appropriate:
                        
                        quint32 prev = _q_function.data().toUInt32();
                        //if (cppSig!="RGraphicsViewQt::event") {
                            _q_function.setData(QScriptValue(engine, prev & 0xFFFF0000));
                        //}
                        RGraphicsViewQt::dropEvent(
                            event
                        );

                        // block recursion again:
                        _q_function.setData(QScriptValue(engine, prev));

                        //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::dropEvent", engine);

                        
                            return;
                          
                }
                    // prevent recursion if script implementation calls base implementation
                    // mark function as 'in call':
                    quint32 prev = _q_function.data().toUInt32();
                    _q_function.setData(QScriptValue(engine, uint(prev | 0x0000B000)));
                    
                        // temporary make protected function scriptable, only from the context of this function call:
                        QScriptValue proto = engine->defaultPrototype(qMetaTypeId<RGraphicsViewQt*>());
                        REcmaHelper::registerFunction(engine, &proto, dropEvent, "dropEvent");
                        
                            _q_function.call(__qtscript_self,
                                QScriptValueList()
                                



    // type: QDropEvent *, copyable: false
        << qScriptValueFromValue(engine, 

        event
        )
      
                            )
                        
                    ;
                    _q_function.setData(QScriptValue(engine, prev));

                    //REcmaHelper::shellFunctionEnd("REcmaShellGraphicsViewQt::dropEvent", engine);

                    
            }
        
    
  

    // protected methods (only available for ECMA shell classes) (generated by xsl2xpp.xsl):
	 QScriptValue
        REcmaShellGraphicsViewQt::event
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::event", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::event";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QEvent *QEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->RGraphicsViewQt::event(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.event().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::event", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::gestureEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::gestureEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::gestureEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QGestureEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QGestureEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QGestureEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QGestureEvent *QGestureEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->RGraphicsViewQt::gestureEvent(a0);
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.gestureEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::gestureEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::focusInEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::focusInEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::focusInEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFocusEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QFocusEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QFocusEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QFocusEvent *QFocusEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::focusInEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.focusInEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::focusInEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::focusOutEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::focusOutEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::focusOutEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFocusEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QFocusEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QFocusEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QFocusEvent *QFocusEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::focusOutEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.focusOutEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::focusOutEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::tabletEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::tabletEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::tabletEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QTabletEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QTabletEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QTabletEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QTabletEvent *QTabletEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::tabletEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.tabletEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::tabletEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::mouseMoveEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::mouseMoveEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::mouseMoveEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::mouseMoveEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mouseMoveEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::mouseMoveEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::mousePressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::mousePressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::mousePressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::mousePressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mousePressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::mousePressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::mouseReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::mouseReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::mouseReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::mouseReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mouseReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::mouseReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::mouseDoubleClickEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::mouseDoubleClickEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::mouseDoubleClickEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QMouseEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QMouseEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QMouseEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QMouseEvent *QMouseEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::mouseDoubleClickEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.mouseDoubleClickEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::mouseDoubleClickEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::wheelEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::wheelEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::wheelEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QWheelEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QWheelEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QWheelEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QWheelEvent *QWheelEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::wheelEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.wheelEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::wheelEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::paintEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::paintEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::paintEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPaintEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QPaintEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QPaintEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QPaintEvent *QPaintEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::paintEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.paintEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::paintEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::resizeEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::resizeEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::resizeEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QResizeEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QResizeEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QResizeEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QResizeEvent *QResizeEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::resizeEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.resizeEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::resizeEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::keyPressEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::keyPressEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::keyPressEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QKeyEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QKeyEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QKeyEvent *QKeyEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::keyPressEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.keyPressEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::keyPressEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::keyReleaseEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::keyReleaseEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::keyReleaseEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QKeyEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QKeyEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QKeyEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QKeyEvent *QKeyEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::keyReleaseEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.keyReleaseEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::keyReleaseEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::dragEnterEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::dragEnterEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::dragEnterEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDragEnterEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QDragEnterEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QDragEnterEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QDragEnterEvent *QDragEnterEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::dragEnterEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.dragEnterEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::dragEnterEvent", context, engine);
            return result;
        }
         QScriptValue
        REcmaShellGraphicsViewQt::dropEvent
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaShellGraphicsViewQt::dropEvent", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaShellGraphicsViewQt::dropEvent";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // protected function: can only be called from ECMA shell:
                    REcmaShellGraphicsViewQt* self = 
                        getSelfShell("", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QDropEvent * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    QDropEvent * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<QDropEvent >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RGraphicsViewQt: Argument 0 is not of type QDropEvent *QDropEvent *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->RGraphicsViewQt::dropEvent(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewQt.dropEvent().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaShellGraphicsViewQt::dropEvent", context, engine);
            return result;
        }
        
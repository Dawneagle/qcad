// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaGraphicsViewWorker.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
            
        // includes for base ecma wrapper classes
         void REcmaGraphicsViewWorker::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RGraphicsViewWorker*) 0)));
        protoCreated = true;
    }

    
        // primary base class QThread:
        
            QScriptValue dpt = engine.defaultPrototype(
                qMetaTypeId<QThread*>());

            if (dpt.isValid()) {
                proto->setPrototype(dpt);
            }
          
        /*
        
        */
    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    
        // conversion for base class QThread
        REcmaHelper::registerFunction(&engine, proto, getQThread, "getQThread");
        

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, run, "run");
            
            REcmaHelper::registerFunction(&engine, proto, init, "init");
            
            REcmaHelper::registerFunction(&engine, proto, setClearMode, "setClearMode");
            
            REcmaHelper::registerFunction(&engine, proto, getClearMode, "getClearMode");
            
            REcmaHelper::registerFunction(&engine, proto, getImage, "getImage");
            
            REcmaHelper::registerFunction(&engine, proto, setImage, "setImage");
            
            REcmaHelper::registerFunction(&engine, proto, getImageSize, "getImageSize");
            
            REcmaHelper::registerFunction(&engine, proto, initImageBuffer, "initImageBuffer");
            
            REcmaHelper::registerFunction(&engine, proto, hasTransforms, "hasTransforms");
            
            REcmaHelper::registerFunction(&engine, proto, getEntityTransformStack, "getEntityTransformStack");
            
            REcmaHelper::registerFunction(&engine, proto, pushTransform, "pushTransform");
            
            REcmaHelper::registerFunction(&engine, proto, popTransform, "popTransform");
            
            REcmaHelper::registerFunction(&engine, proto, paint, "paint");
            
            REcmaHelper::registerFunction(&engine, proto, begin, "begin");
            
            REcmaHelper::registerFunction(&engine, proto, end, "end");
            
            REcmaHelper::registerFunction(&engine, proto, clear, "clear");
            
            REcmaHelper::registerFunction(&engine, proto, setAntialiasing, "setAntialiasing");
            
            REcmaHelper::registerFunction(&engine, proto, getAntialiasing, "getAntialiasing");
            
            REcmaHelper::registerFunction(&engine, proto, setBackground, "setBackground");
            
            REcmaHelper::registerFunction(&engine, proto, setCompositionMode, "setCompositionMode");
            
            REcmaHelper::registerFunction(&engine, proto, setFont, "setFont");
            
            REcmaHelper::registerFunction(&engine, proto, eraseRect, "eraseRect");
            
            REcmaHelper::registerFunction(&engine, proto, setClipRect, "setClipRect");
            
            REcmaHelper::registerFunction(&engine, proto, setClipping, "setClipping");
            
            REcmaHelper::registerFunction(&engine, proto, setOpacity, "setOpacity");
            
            REcmaHelper::registerFunction(&engine, proto, save, "save");
            
            REcmaHelper::registerFunction(&engine, proto, restore, "restore");
            
            REcmaHelper::registerFunction(&engine, proto, getTransform, "getTransform");
            
            REcmaHelper::registerFunction(&engine, proto, setTransform, "setTransform");
            
            REcmaHelper::registerFunction(&engine, proto, translate, "translate");
            
            REcmaHelper::registerFunction(&engine, proto, scale, "scale");
            
            REcmaHelper::registerFunction(&engine, proto, getWorldTransform, "getWorldTransform");
            
            REcmaHelper::registerFunction(&engine, proto, setWorldTransform, "setWorldTransform");
            
            REcmaHelper::registerFunction(&engine, proto, setBrush, "setBrush");
            
            REcmaHelper::registerFunction(&engine, proto, getPen, "getPen");
            
            REcmaHelper::registerFunction(&engine, proto, setPen, "setPen");
            
            REcmaHelper::registerFunction(&engine, proto, drawPoint, "drawPoint");
            
            REcmaHelper::registerFunction(&engine, proto, paintImage, "paintImage");
            
            REcmaHelper::registerFunction(&engine, proto, drawImage, "drawImage");
            
            REcmaHelper::registerFunction(&engine, proto, paintText, "paintText");
            
            REcmaHelper::registerFunction(&engine, proto, drawText, "drawText");
            
            REcmaHelper::registerFunction(&engine, proto, drawTextLayout, "drawTextLayout");
            
            REcmaHelper::registerFunction(&engine, proto, fillPath, "fillPath");
            
            REcmaHelper::registerFunction(&engine, proto, drawPath, "drawPath");
            
            REcmaHelper::registerFunction(&engine, proto, drawLine, "drawLine");
            
            REcmaHelper::registerFunction(&engine, proto, strokePath, "strokePath");
            
            REcmaHelper::registerFunction(&engine, proto, drawEllipse, "drawEllipse");
            
            REcmaHelper::registerFunction(&engine, proto, drawRect, "drawRect");
            
            REcmaHelper::registerFunction(&engine, proto, fillRect, "fillRect");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RGraphicsViewWorker*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    ctor.setProperty("NoClear",
    QScriptValue(RGraphicsViewWorker::NoClear),
    QScriptValue::ReadOnly);


    ctor.setProperty("ClearToTransparent",
    QScriptValue(RGraphicsViewWorker::ClearToTransparent),
    QScriptValue::ReadOnly);


    ctor.setProperty("ClearToBackground",
    QScriptValue(RGraphicsViewWorker::ClearToBackground),
    QScriptValue::ReadOnly);


    // enum conversions:
    
    qScriptRegisterMetaType<RGraphicsViewWorker::ClearMode>(
        &engine,
        toScriptValueEnumClearMode,
        fromScriptValueEnumClearMode,
        ctor.property(QString::fromLatin1("prototype"))
    );

        
    // init class:
    engine.globalObject().setProperty("RGraphicsViewWorker",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaGraphicsViewWorker::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RGraphicsViewWorker: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
     QScriptValue REcmaGraphicsViewWorker::getQThread(QScriptContext *context,
            QScriptEngine *engine)
        
            {
                QThread* cppResult =
                    qscriptvalue_cast<RGraphicsViewWorker*> (context->thisObject());
                QScriptValue result = qScriptValueFromValue(engine, cppResult);
                return result;
            }
            

    // returns class name:
     QScriptValue REcmaGraphicsViewWorker::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RGraphicsViewWorker"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaGraphicsViewWorker::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        
        list.append("QThread");
    

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaGraphicsViewWorker::run
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::run", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::run";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("run", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->run();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.run().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::run", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::init
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::init", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::init";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("init", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isArray()
        ) /* type: QList < REntity::Id > */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
     && (
            context->argument(2).isNumber()
        ) /* type: int */
    
    ){
    // prepare arguments:
    
                    // argument isArray or QVariantMap
                    QList < REntity::Id >
                    a0;
                    REcmaHelper::fromScriptValue(
                        engine,
                        context->argument(0),
                        a0
                    );
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a2 =
                    (int)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->init(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.init().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::init", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setClearMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setClearMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setClearMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setClearMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RGraphicsViewWorker::ClearMode */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RGraphicsViewWorker::ClearMode*
                    ap0 =
                    qscriptvalue_cast<
                    RGraphicsViewWorker::ClearMode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RGraphicsViewWorker::ClearMode*.",
                               context);                    
                    }
                    RGraphicsViewWorker::ClearMode& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setClearMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setClearMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setClearMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getClearMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getClearMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getClearMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getClearMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RGraphicsViewWorker::ClearMode'
    RGraphicsViewWorker::ClearMode cppResult =
        
               self->getClearMode();
        // return type: RGraphicsViewWorker::ClearMode
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getClearMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getClearMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QImage'
    QImage cppResult =
        
               self->getImage();
        // return type: QImage
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QImage */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QImage*
                    ap0 =
                    qscriptvalue_cast<
                    QImage*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QImage*.",
                               context);                    
                    }
                    QImage& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setImage(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getImageSize
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getImageSize", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getImageSize";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getImageSize", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QSize'
    QSize cppResult =
        
               self->getImageSize();
        // return type: QSize
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getImageSize().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getImageSize", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::initImageBuffer
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::initImageBuffer", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::initImageBuffer";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("initImageBuffer", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QSize */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QSize*
                    ap0 =
                    qscriptvalue_cast<
                    QSize*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QSize*.",
                               context);                    
                    }
                    QSize& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->initImageBuffer(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.initImageBuffer().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::initImageBuffer", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::hasTransforms
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::hasTransforms", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::hasTransforms";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("hasTransforms", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->hasTransforms();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.hasTransforms().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::hasTransforms", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getEntityTransformStack
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getEntityTransformStack", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getEntityTransformStack";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getEntityTransformStack", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QStack < RTransform >'
    QStack < RTransform > cppResult =
        
               self->getEntityTransformStack();
        // return type: QStack < RTransform >
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getEntityTransformStack().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getEntityTransformStack", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::pushTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::pushTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::pushTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("pushTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTransform */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTransform*
                    ap0 =
                    qscriptvalue_cast<
                    RTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RTransform.",
                               context);                    
                    }
                    RTransform 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->pushTransform(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.pushTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::pushTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::popTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::popTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::popTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("popTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->popTransform();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.popTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::popTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::paint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::paint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::paint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("paint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paint();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.paint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::paint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::begin
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::begin", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::begin";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("begin", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->begin();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.begin().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::begin", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::end
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::end", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::end";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("end", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->end();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.end().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::end", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::clear
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::clear", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::clear";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("clear", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->clear();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.clear().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::clear", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setAntialiasing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setAntialiasing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setAntialiasing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setAntialiasing", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setAntialiasing(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setAntialiasing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setAntialiasing", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getAntialiasing
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getAntialiasing", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getAntialiasing";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getAntialiasing", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'bool'
    bool cppResult =
        
               self->getAntialiasing();
        // return type: bool
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getAntialiasing().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getAntialiasing", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setBackground
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setBackground", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setBackground";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setBackground", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant()
        ) /* type: QColor */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    QColor*
                    ap0 =
                    qscriptvalue_cast<
                    QColor*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QColor.",
                               context);                    
                    }
                    QColor 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBackground(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setBackground().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setBackground", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setCompositionMode
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setCompositionMode", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setCompositionMode";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setCompositionMode", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPainter::CompositionMode */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPainter::CompositionMode*
                    ap0 =
                    qscriptvalue_cast<
                    QPainter::CompositionMode*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPainter::CompositionMode*.",
                               context);                    
                    }
                    QPainter::CompositionMode& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setCompositionMode(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setCompositionMode().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setCompositionMode", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setFont
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setFont", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setFont";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setFont", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QFont */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QFont*
                    ap0 =
                    qscriptvalue_cast<
                    QFont*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QFont*.",
                               context);                    
                    }
                    QFont& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setFont(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setFont().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setFont", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::eraseRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::eraseRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::eraseRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("eraseRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->eraseRect(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.eraseRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::eraseRect", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setClipRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setClipRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setClipRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setClipRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setClipRect(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setClipRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setClipRect", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setClipping
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setClipping", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setClipping";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setClipping", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    bool
                    a0 =
                    (bool)
                    
                    context->argument( 0 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setClipping(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setClipping().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setClipping", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setOpacity
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setOpacity", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setOpacity";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setOpacity", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setOpacity(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setOpacity().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setOpacity", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::save
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::save", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::save";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("save", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->save();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.save().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::save", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::restore
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::restore", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::restore";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("restore", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->restore();
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.restore().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::restore", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QTransform'
    QTransform cppResult =
        
               self->getTransform();
        // return type: QTransform
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTransform(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setTransform(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::translate
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::translate", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::translate";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("translate", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->translate(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.translate().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::translate", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::scale
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::scale", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::scale";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("scale", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isNumber()
        ) /* type: double */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    double
                    a0 =
                    (double)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->scale(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.scale().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::scale", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getWorldTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getWorldTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getWorldTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getWorldTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QTransform'
    QTransform cppResult =
        
               self->getWorldTransform();
        // return type: QTransform
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getWorldTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getWorldTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setWorldTransform
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setWorldTransform", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setWorldTransform";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setWorldTransform", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setWorldTransform(a0);
    } else


        
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTransform */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTransform*
                    ap0 =
                    qscriptvalue_cast<
                    QTransform*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QTransform*.",
                               context);                    
                    }
                    QTransform& a0 = *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setWorldTransform(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setWorldTransform().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setWorldTransform", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setBrush
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setBrush", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setBrush";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setBrush", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QBrush */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QBrush*
                    ap0 =
                    qscriptvalue_cast<
                    QBrush*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QBrush*.",
                               context);                    
                    }
                    QBrush& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setBrush(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setBrush().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setBrush", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::getPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::getPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::getPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("getPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'QPen'
    QPen cppResult =
        
               self->getPen();
        // return type: QPen
                // not standard type nor reference
                result = qScriptValueFromValue(engine, cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.getPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::getPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::setPen
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::setPen", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::setPen";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("setPen", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPen */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPen*
                    ap0 =
                    qscriptvalue_cast<
                    QPen*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPen*.",
                               context);                    
                    }
                    QPen& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setPen(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.setPen().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::setPen", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawPoint
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawPoint", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawPoint";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawPoint", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPointF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPointF*
                    ap0 =
                    qscriptvalue_cast<
                    QPointF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPointF*.",
                               context);                    
                    }
                    QPointF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawPoint(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawPoint().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawPoint", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::paintImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::paintImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::paintImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("paintImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RImageData */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RImageData*
                    ap0 =
                    qscriptvalue_cast<
                    RImageData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RImageData.",
                               context);                    
                    }
                    RImageData 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintImage(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.paintImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::paintImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawImage
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawImage", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawImage";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawImage", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isNumber()
        ) /* type: int */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNull()
        ) /* type: QImage */
    
    ){
    // prepare arguments:
    
                    // argument isStandardType
                    int
                    a0 =
                    (int)
                    
                    context->argument( 0 ).
                    toNumber();
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument is reference
                    QImage*
                    ap2 =
                    qscriptvalue_cast<
                    QImage*
                        >(
                        context->argument(
                        2
                        )
                    );
                    if( ap2 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 2 is not of type QImage*.",
                               context);                    
                    }
                    QImage& a2 = *ap2;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawImage(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawImage().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawImage", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::paintText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::paintText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::paintText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("paintText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RTextBasedData */
     && (
            context->argument(1).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RTextBasedData*
                    ap0 =
                    qscriptvalue_cast<
                    RTextBasedData*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RTextBasedData.",
                               context);                    
                    }
                    RTextBasedData 
                    a0 = 
                    *ap0;
                
                    // argument isStandardType
                    bool
                    a1 =
                    (bool)
                    
                    context->argument( 1 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->paintText(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.paintText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::paintText", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawText
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawText", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawText";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawText", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
     && (
            context->argument(1).isNumber()
        ) /* type: int */
     && (
            context->argument(2).isString()
        ) /* type: QString */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
                    // argument isStandardType
                    int
                    a1 =
                    (int)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    QString
                    a2 =
                    (QString)
                    
                    context->argument( 2 ).
                    toString();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawText(a0
        ,
    a1
        ,
    a2);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawText().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawText", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawTextLayout
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawTextLayout", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawTextLayout";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawTextLayout", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QTextLayout */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QTextLayout*
                    ap0 =
                    qscriptvalue_cast<
                    QTextLayout*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QTextLayout*.",
                               context);                    
                    }
                    QTextLayout& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawTextLayout(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawTextLayout().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawTextLayout", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::fillPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::fillPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::fillPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("fillPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QBrush */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
                    // argument is reference
                    QBrush*
                    ap1 =
                    qscriptvalue_cast<
                    QBrush*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 1 is not of type QBrush*.",
                               context);                    
                    }
                    QBrush& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fillPath(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.fillPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::fillPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawPath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawPath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawPath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawPath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RPainterPath */
    
    ){
    // prepare arguments:
    
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    RPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if (ap0 == NULL) {
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type RPainterPath.",
                               context);                    
                    }
                    RPainterPath 
                    a0 = 
                    *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawPath(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawPath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawPath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawLine
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawLine", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawLine";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawLine", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPointF */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QPointF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPointF*
                    ap0 =
                    qscriptvalue_cast<
                    QPointF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPointF*.",
                               context);                    
                    }
                    QPointF& a0 = *ap0;
                
                    // argument is reference
                    QPointF*
                    ap1 =
                    qscriptvalue_cast<
                    QPointF*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 1 is not of type QPointF*.",
                               context);                    
                    }
                    QPointF& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawLine(a0
        ,
    a1);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QLineF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QLineF*
                    ap0 =
                    qscriptvalue_cast<
                    QLineF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QLineF*.",
                               context);                    
                    }
                    QLineF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawLine(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawLine().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawLine", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::strokePath
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::strokePath", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::strokePath";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("strokePath", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPainterPath */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QPen */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPainterPath*
                    ap0 =
                    qscriptvalue_cast<
                    QPainterPath*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPainterPath*.",
                               context);                    
                    }
                    QPainterPath& a0 = *ap0;
                
                    // argument is reference
                    QPen*
                    ap1 =
                    qscriptvalue_cast<
                    QPen*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 1 is not of type QPen*.",
                               context);                    
                    }
                    QPen& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->strokePath(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.strokePath().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::strokePath", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawEllipse
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawEllipse", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawEllipse";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawEllipse", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QPointF */
     && (
            context->argument(1).isNumber()
        ) /* type: double */
     && (
            context->argument(2).isNumber()
        ) /* type: double */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QPointF*
                    ap0 =
                    qscriptvalue_cast<
                    QPointF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QPointF*.",
                               context);                    
                    }
                    QPointF& a0 = *ap0;
                
                    // argument isStandardType
                    double
                    a1 =
                    (double)
                    
                    context->argument( 1 ).
                    toNumber();
                
                    // argument isStandardType
                    double
                    a2 =
                    (double)
                    
                    context->argument( 2 ).
                    toNumber();
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawEllipse(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawEllipse(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawEllipse().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawEllipse", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::drawRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::drawRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::drawRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("drawRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->drawRect(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.drawRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::drawRect", context, engine);
            return result;
        }
         QScriptValue
        REcmaGraphicsViewWorker::fillRect
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaGraphicsViewWorker::fillRect", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaGraphicsViewWorker::fillRect";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RGraphicsViewWorker* self = 
                        getSelf("fillRect", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: QRectF */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: QBrush */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    QRectF*
                    ap0 =
                    qscriptvalue_cast<
                    QRectF*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 0 is not of type QRectF*.",
                               context);                    
                    }
                    QRectF& a0 = *ap0;
                
                    // argument is reference
                    QBrush*
                    ap1 =
                    qscriptvalue_cast<
                    QBrush*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if( ap1 == NULL ){
                           return REcmaHelper::throwError("RGraphicsViewWorker: Argument 1 is not of type QBrush*.",
                               context);                    
                    }
                    QBrush& a1 = *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->fillRect(a0
        ,
    a1);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RGraphicsViewWorker.fillRect().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaGraphicsViewWorker::fillRect", context, engine);
            return result;
        }
         QScriptValue REcmaGraphicsViewWorker::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RGraphicsViewWorker* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RGraphicsViewWorker(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaGraphicsViewWorker::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RGraphicsViewWorker* self = getSelf("RGraphicsViewWorker", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RGraphicsViewWorker* REcmaGraphicsViewWorker::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RGraphicsViewWorker* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RGraphicsViewWorker >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RGraphicsViewWorker.%1(): "
                        "This object is not a RGraphicsViewWorker").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RGraphicsViewWorker* REcmaGraphicsViewWorker::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RGraphicsViewWorker* selfBase = getSelf(fName, context);
                RGraphicsViewWorker* self = dynamic_cast<RGraphicsViewWorker*>(selfBase);
                //return REcmaHelper::scriptValueTo<RGraphicsViewWorker >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RGraphicsViewWorker.%1(): "
                    "This object is not a RGraphicsViewWorker").arg(fName),
                    context);
            }

            return self;
            


        }
         QScriptValue REcmaGraphicsViewWorker::toScriptValueEnumClearMode(QScriptEngine* engine, const RGraphicsViewWorker::ClearMode& value)
    
        {
            return QScriptValue(engine, (int)value);
        }
         void REcmaGraphicsViewWorker::fromScriptValueEnumClearMode(const QScriptValue& value, RGraphicsViewWorker::ClearMode& out)
    
        {
            out = qvariant_cast<RGraphicsViewWorker::ClearMode>(value.toVariant());
        }
        
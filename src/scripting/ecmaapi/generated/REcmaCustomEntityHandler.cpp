// ***** AUTOGENERATED CODE, DO NOT EDIT *****
            // ***** This class is not copyable.
        
        #include "REcmaCustomEntityHandler.h"
        #include "RMetaTypes.h"
        #include "../REcmaHelper.h"

        // forwards declarations mapped to includes
        
                #include "RDocument.h"
            
                #include "RExporter.h"
            
                #include "RCustomEntity.h"
            
            
        // includes for base ecma wrapper classes
         void REcmaCustomEntityHandler::initEcma(QScriptEngine& engine, QScriptValue* proto 
    
    ) 
    
    {

    bool protoCreated = false;
    if(proto == NULL){
        proto = new QScriptValue(engine.newVariant(qVariantFromValue(
                (RCustomEntityHandler*) 0)));
        protoCreated = true;
    }

    

    QScriptValue fun;

    // toString:
    REcmaHelper::registerFunction(&engine, proto, toString, "toString");
    

    // destroy:
    REcmaHelper::registerFunction(&engine, proto, destroy, "destroy");
    

    // get class name
    REcmaHelper::registerFunction(&engine, proto, getClassName, "getClassName");
    

    // conversion to all base classes (multiple inheritance):
    REcmaHelper::registerFunction(&engine, proto, getBaseClasses, "getBaseClasses");
    

    // properties:
    

    // methods:
    
            REcmaHelper::registerFunction(&engine, proto, getEntityType, "getEntityType");
            
            REcmaHelper::registerFunction(&engine, proto, render, "render");
            
            REcmaHelper::registerFunction(&engine, proto, setProperty, "setProperty");
            
            REcmaHelper::registerFunction(&engine, proto, getProperty, "getProperty");
            
        engine.setDefaultPrototype(
            qMetaTypeId<RCustomEntityHandler*>(), *proto);

        
    

    QScriptValue ctor = engine.newFunction(createEcma, *proto, 2);
    
    // static methods:
    

    // static properties:
    

    // enum values:
    

    // enum conversions:
    
        
    // init class:
    engine.globalObject().setProperty("RCustomEntityHandler",
    ctor, QScriptValue::SkipInEnumeration);
    
    if( protoCreated ){
       delete proto;
    }
    
    }
     QScriptValue REcmaCustomEntityHandler::createEcma(QScriptContext* context, QScriptEngine* engine) 
    
    {
           return REcmaHelper::throwError("Abstract class RCustomEntityHandler: Cannot be constructed.",
               context); 
    }
    

    // conversion functions for base classes:
    

    // returns class name:
     QScriptValue REcmaCustomEntityHandler::getClassName(QScriptContext *context, QScriptEngine *engine) 
        
    {
        return qScriptValueFromValue(engine, QString("RCustomEntityHandler"));
    }
    

    // returns all base classes (in case of multiple inheritance):
     QScriptValue REcmaCustomEntityHandler::getBaseClasses(QScriptContext *context, QScriptEngine *engine) 
        
    {
        QStringList list;
        

        return qScriptValueFromSequence(engine, list);
    }
    

    // properties:
    

    // public methods:
     QScriptValue
        REcmaCustomEntityHandler::getEntityType
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaCustomEntityHandler::getEntityType", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaCustomEntityHandler::getEntityType";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RCustomEntityHandler* self = 
                        getSelf("getEntityType", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    0
    ){
    // prepare arguments:
    
    // end of arguments

    // call C++ function:
    // return type 'RS::EntityType'
    RS::EntityType cppResult =
        
               self->getEntityType();
        // return type: RS::EntityType
                // standard Type
                result = QScriptValue(cppResult);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RCustomEntityHandler.getEntityType().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaCustomEntityHandler::getEntityType", context, engine);
            return result;
        }
         QScriptValue
        REcmaCustomEntityHandler::render
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaCustomEntityHandler::render", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaCustomEntityHandler::render";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RCustomEntityHandler* self = 
                        getSelf("render", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    1 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RBlockReferenceEntity * */
    
    ){
    // prepare arguments:
    
                    // argument is pointer
                    RBlockReferenceEntity * a0 = NULL;

                    a0 = 
                        REcmaHelper::scriptValueTo<RBlockReferenceEntity >(
                            context->argument(0)
                        );
                    
                    if (a0==NULL && 
                        !context->argument(0).isNull()) {
                        return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RBlockReferenceEntity *RBlockReferenceEntity *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->render(a0);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RCustomEntityHandler.render().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaCustomEntityHandler::render", context, engine);
            return result;
        }
         QScriptValue
        REcmaCustomEntityHandler::setProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaCustomEntityHandler::setProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaCustomEntityHandler::setProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RCustomEntityHandler* self = 
                        getSelf("setProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNumber() || 
            context->argument(2).isString() || 
            context->argument(2).isBool() || 
            context->argument(2).isArray() || 
            context->argument(2).isNull() || 
            context->argument(2).isUndefined()
        ) /* type: QVariant */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
                    // argument isCopyable or pointer
                    QVariant
                    a2 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        2
                        )
                    );
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProperty(a0
        ,
    a1
        ,
    a2);
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(2).isVariant() || 
            context->argument(2).isQObject() || 
            context->argument(2).isNumber() || 
            context->argument(2).isString() || 
            context->argument(2).isBool() || 
            context->argument(2).isArray() || 
            context->argument(2).isNull() || 
            context->argument(2).isUndefined()
        ) /* type: QVariant */
     && (
            context->argument(3).isVariant() || 
            context->argument(3).isQObject() || 
            context->argument(3).isNull()
        ) /* type: RTransaction * */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
                    // argument isCopyable or pointer
                    QVariant
                    a2 =
                    qscriptvalue_cast<
                    QVariant
                        >(
                        context->argument(
                        2
                        )
                    );
                
                    // argument is pointer
                    RTransaction * a3 = NULL;

                    a3 = 
                        REcmaHelper::scriptValueTo<RTransaction >(
                            context->argument(3)
                        );
                    
                    if (a3==NULL && 
                        !context->argument(3).isNull()) {
                        return REcmaHelper::throwError("RCustomEntityHandler: Argument 3 is not of type RTransaction *RTransaction *.", context);                    
                    }
                
    // end of arguments

    // call C++ function:
    // return type 'void'
    
               self->setProperty(a0
        ,
    a1
        ,
    a2
        ,
    a3);
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RCustomEntityHandler.setProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaCustomEntityHandler::setProperty", context, engine);
            return result;
        }
         QScriptValue
        REcmaCustomEntityHandler::getProperty
        (QScriptContext* context, QScriptEngine* engine) 
        
        {
            //REcmaHelper::functionStart("REcmaCustomEntityHandler::getProperty", context, engine);
            //qDebug() << "ECMAScript WRAPPER: REcmaCustomEntityHandler::getProperty";
            //QCoreApplication::processEvents();

            QScriptValue result = engine->undefinedValue();
            
                    // public function: can be called from ECMA wrapper of ECMA shell:
                    RCustomEntityHandler* self = 
                        getSelf("getProperty", context);
                  

                //Q_ASSERT(self!=NULL);
                if (self==NULL) {
                    return REcmaHelper::throwError("self is NULL", context);
                }
                
    
    if( context->argumentCount() ==
    2 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    3 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1
        ,
    a2);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    4 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
     && (
            context->argument(3).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a3 =
                    (bool)
                    
                    context->argument( 3 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1
        ,
    a2
        ,
    a3);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
    
    if( context->argumentCount() ==
    5 && (
            context->argument(0).isVariant() || 
            context->argument(0).isQObject() || 
            context->argument(0).isNull()
        ) /* type: RCustomEntity */
     && (
            context->argument(1).isVariant() || 
            context->argument(1).isQObject() || 
            context->argument(1).isNull()
        ) /* type: RPropertyTypeId */
     && (
            context->argument(2).isBool()
        ) /* type: bool */
     && (
            context->argument(3).isBool()
        ) /* type: bool */
     && (
            context->argument(4).isBool()
        ) /* type: bool */
    
    ){
    // prepare arguments:
    
                    // argument is reference
                    RCustomEntity*
                    ap0 =
                    qscriptvalue_cast<
                    RCustomEntity*
                        >(
                        context->argument(
                        0
                        )
                    );
                    if( ap0 == NULL ){

                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 0 is not of type RCustomEntity* or QSharedPointer<RCustomEntity>.",
                               context);
                    }
                    RCustomEntity& a0 = *ap0;
                
                    // argument isCopyable and has default constructor and isSimpleClass 
                    RPropertyTypeId*
                    ap1 =
                    qscriptvalue_cast<
                    RPropertyTypeId*
                        >(
                        context->argument(
                        1
                        )
                    );
                    if (ap1 == NULL) {
                           return REcmaHelper::throwError("RCustomEntityHandler: Argument 1 is not of type RPropertyTypeId.",
                               context);                    
                    }
                    RPropertyTypeId 
                    a1 = 
                    *ap1;
                
                    // argument isStandardType
                    bool
                    a2 =
                    (bool)
                    
                    context->argument( 2 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a3 =
                    (bool)
                    
                    context->argument( 3 ).
                    toBool();
                
                    // argument isStandardType
                    bool
                    a4 =
                    (bool)
                    
                    context->argument( 4 ).
                    toBool();
                
    // end of arguments

    // call C++ function:
    // return type 'QPair < QVariant , RPropertyAttributes >'
    QPair < QVariant , RPropertyAttributes > cppResult =
        
               self->getProperty(a0
        ,
    a1
        ,
    a2
        ,
    a3
        ,
    a4);
        // return type: QPair < QVariant , RPropertyAttributes >
                // Pair of ...:
                //result = REcmaHelper::pairToScriptValue(engine, cppResult);
                QVariantList vl;
                QVariant v;
                
                    // first type of pair is variant:
                    if (QString(cppResult.first.typeName())=="RLineweight::Lineweight") {
                        v.setValue((int)cppResult.first.value<RLineweight::Lineweight>());
                    }
                    else {
                        v.setValue(cppResult.first);
                    }
                  

                vl.append(v);
                v.setValue(cppResult.second);
                vl.append(v);
                result = qScriptValueFromValue(engine, vl);
            
    } else


        
            {
               return REcmaHelper::throwError("Wrong number/types of arguments for RCustomEntityHandler.getProperty().",
                   context);
            }
            //REcmaHelper::functionEnd("REcmaCustomEntityHandler::getProperty", context, engine);
            return result;
        }
         QScriptValue REcmaCustomEntityHandler::toString
    (QScriptContext *context, QScriptEngine *engine)
    
    {

    RCustomEntityHandler* self = getSelf("toString", context);
    
    QString result;
    
            result = QString("RCustomEntityHandler(0x%1)").arg((unsigned long int)self, 0, 16);
        
    return QScriptValue(result);
    }
     QScriptValue REcmaCustomEntityHandler::destroy(QScriptContext *context, QScriptEngine *engine)
    
    {

        RCustomEntityHandler* self = getSelf("RCustomEntityHandler", context);
        //Q_ASSERT(self!=NULL);
        if (self==NULL) {
            return REcmaHelper::throwError("self is NULL", context);
        }
        
    
        delete self;
        context->thisObject().setData(engine->nullValue());
        context->thisObject().prototype().setData(engine->nullValue());
        context->thisObject().setPrototype(engine->nullValue());
        context->thisObject().setScriptClass(NULL);
        return engine->undefinedValue();
    }
    RCustomEntityHandler* REcmaCustomEntityHandler::getSelf(const QString& fName, QScriptContext* context)
    
        {
            RCustomEntityHandler* self = NULL;

            
                // self could be a normal object (e.g. from an UI file) or
                // an ECMA shell object (made from an ECMA script):
                //self = getSelfShell(fName, context);
                

            //if (self==NULL) {
                self = REcmaHelper::scriptValueTo<RCustomEntityHandler >(context->thisObject())
                
                ;
            //}

            if (self == NULL){
                // avoid recursion (toString is used by the backtrace):
                if (fName!="toString") {
                    REcmaHelper::throwError(QString("RCustomEntityHandler.%1(): "
                        "This object is not a RCustomEntityHandler").arg(fName),
                        context);
                }
                return NULL;
            }

            return self;
        }
        RCustomEntityHandler* REcmaCustomEntityHandler::getSelfShell(const QString& fName, QScriptContext* context)
    
        {
          RCustomEntityHandler* selfBase = getSelf(fName, context);
                RCustomEntityHandler* self = dynamic_cast<RCustomEntityHandler*>(selfBase);
                //return REcmaHelper::scriptValueTo<RCustomEntityHandler >(context->thisObject());
            if(self == NULL){
                REcmaHelper::throwError(QString("RCustomEntityHandler.%1(): "
                    "This object is not a RCustomEntityHandler").arg(fName),
                    context);
            }

            return self;
            


        }
        